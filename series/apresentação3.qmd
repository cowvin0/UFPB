---
format: revealjs
lang: pt
title: a
subtitle: Séries temporais
author:
    - Jéssika
    - Paulo
    - Gabriel
date: today
date-format: long
highlight-style: github
echo: true
---

```{r echo=FALSE}
library(fable)
library(tidyverse)
library(fabletools)
library(modeltime)
library(yardstick)
library(timetk)
library(rsample)
library(parsnip)
library(smooth)
```


## Dados
Esta série é sobre a venda de cerveja, vinho e outras bebidas alcoólicas em milhões de dólares nos Estados Unidos.

Eles provêm do departamento de Censo dos Estados Unidos e estão disponíveis no site de dados de economia da reserva Federal (FRED)^[<https://fred.stlouisfed.org/series/S4248SM144NCEN>]

```{r}
data <- read_csv("drinks.csv") |>
    rename(date = DATE, sales = S4248SM144NCEN) |>
    filter(year(date) < 2020)
antes <- data |>
    filter(year(date) < 2019)
depois <- data |>
    filter(year(date) == 2019)
splits <- initial_time_split(data, prop = 0.96428572)
```

## Gráfico da série
Vemos que os dados tem sazonalidade anual e tendência crescente.

```{r}
#| echo: false
#| out-width: 100%
#| fig-height: 4
data |>
    ggplot(aes(x = date, y = sales)) +
    geom_line() +
    theme_bw()
```

## Método Naïve

O método Naïve é um caso particular das Médias móveis simples (MMS) em que $r$ (as observações mais recentes) é 1, então o valor mais recente da série é utilizado como previsão de todos os valores futuros.

Assim, as previsões são feitas com:

$$
\hat y_t = y_{t - 1}
$$

## Método Naïve

```{r}
model_fit_ets <- naive_reg() |>
  set_engine("naive") |>
  fit(sales ~ date, data = training(splits))
model_tbl <- modeltime_table(
  model_fit_ets
)
```

## Método Naïve

```{r}
model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) |> 
  modeltime_forecast(
    new_data = testing(splits),
    actual_data = data
  ) |> 
  plot_modeltime_forecast(.interactive = FALSE, .title = "")
```


## Método Naïve

O Naïve consegue fazer previsão apenas sobre o último valor, sem captar a tendência ou a sazonalidade. Dessa forma, chegamos em péssimos resultados, com uma raiz de erro quadrático médio de 2394.204 e erro médio absoluto de 2015.083. O método Naïve pode funcionar bem para casos em que as mudanças demoram muito a acontecer, como mudanças de temperaturas.

```{r}
previsoes <- model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) 
rmse_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
mae_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
```

## Método Naïve sazonal

O método de Naïve sazonal é bastante semelhante ao Naïve, mas invés de tomar o último valor mais recente, utiliza o último valor do mesmo período de uma temporada atrás para fazer previsões.

Assim, as previsões são feitas com:

$$
\hat y_t = y_{t - m}
$$
em que $m$ é a frequência sazonal.

## Método Naïve sazonal

```{r}
model_fit_ets <- naive_reg(seasonal_period = 12) |>
  set_engine("snaive") |>
  fit(sales ~ date, data = training(splits))
model_tbl <- modeltime_table(
  model_fit_ets
)
```

## Método Naïve sazonal

```{r}
model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) |> 
  modeltime_forecast(
    new_data = testing(splits),
    actual_data = data
  ) |> 
  plot_modeltime_forecast(.interactive = FALSE, .title = "")
```

## Método Naïve sazonal

A raiz do erro quadrático médio e o erro médio absoluto foi 826.385, 686.916, respectivamente. Além disso, observando os gráficos de previsões, vemos que o método conseguiu performar bem ao fazer previsões sobre a série temporal. Isso é devido a explicação da sazonalidade contida na série de bebidas.

```{r}
previsoes <- model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) 
rmse_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
mae_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
```


## Média global
De maneira similar ao método Naïve, as previsões do método de média global são todas iguais, porém se baseam em todas as observações da série até antes do momento da previsão, assim a relação é:

$$
\hat y_{t + 1} = \bar y = \dfrac{1}{t} \sum_{i = 0}^{t} y_i
$$

Em geral, esse método é melhor que o Naïve quando há estacionariedade pois a estimatíva da reta de previsão tem menor variância, porém quando há tendência na série, a média global não capta a mesma e o modelo por trás do método é invalido.

## Média global
Nestes dados, a previsão fica muito abaixo do valor observado pois a série possui tendência.

```{r}
media_global <- depois
media_global$sales <- mean(antes$sales)
```

```{r}
#| echo: false
#| out-width: 100%
#| fig-height: 3.5
data |>
    ggplot(aes(x = date, y = sales)) +
    geom_line() +
    geom_line(
        data = media_global,
        aes(x = date, y = sales),
        color = "red", linewidth = 1,
    ) +
    theme_bw()
```

## Média global
Comparando a previsão da média global com o valor observado, obtemos a raiz do erro quadrático médio e erro médio absoluto ambos acima de 5 bilhões de dólares.

```{r}
#| collapse: true
yardstick::rmse_vec(depois$sales, media_global$sales)
yardstick::mae_vec(depois$sales, media_global$sales)
```

## Média móvel simples

O método da média móvel simples é um caso mais geral do método Naïve e da média global, ao invés de fazer a média com todas as observações da série, criamos uma "janela" de observações que entrarão no cálculo da média e essa janela move a cada etapa de tempo predita.

$$
\hat y_{t} = \dfrac{1}{m} \sum_{i = i}^{m} y_{t - i}
$$


$m$ é o parâmetro do modelo que representa o tamanho da janela, para $m = 1$ temos o método Naïve, para $m = t$ temos o método da média global.

## Média móvel simples
Levando em consideração apenas as últimas $m$ variáveis, é possível prever adequadamente séries com tendência.

```{r}
n <- nrow(data)
media_movel <- depois
media_movel$sales <- smooth::sma(antes$sales, order = 6, h = 12)$forecast
```

```{r}
#| echo: false
#| out-width: 100%
#| fig-height: 3.5
data |>
    ggplot(aes(x = date, y = sales)) +
    geom_line() +
    geom_line(
        data = media_movel,
        aes(x = date, y = sales),
        color = "red", size = 1,
    ) +
    theme_bw()
```

## Média móvel simples
Dessa forma, a raiz do erro quadrático médio e o erro médio absoluto são muito menores, sendo 1478 e 1112 respectivamente.

```{r}
#| collapse: true
yardstick::rmse_vec(depois$sales, media_movel$sales)
yardstick::mae_vec(depois$sales, media_movel$sales)
```

## Tendência global   

O método de tendência global faz previsões da seguinte forma:

$$
\hat y_{t + h} = a_0 + a_1(t + h)
$$

em que $a_0$ é o intercept e $a_1$ é o slope da tendência. Valores positivos para o slope implica que a série exibem crescimento, enquanto negativos significam decrescimento. O tamanho de $a_1$ afeta a inclinação da curva. Dessa forma, $\hat y_{t + h}$ é uma reta.

## Tendência global 

```{r}
modelo <- alm(sales ~ trend, data, subset = 1:324)
previsoes <- modelo |> 
  forecast(tail(data, 12), h = 12) |> 
  (\(x) {
    depois$sales <- x$mean
    depois
  })()
```

```{r}
#| echo: false
#| out-width: 100%
#| fig-height: 3.5
data |>
    ggplot(aes(x = date, y = sales)) +
    geom_line() +
    geom_line(
        data = previsoes,
        aes(x = date, y = sales),
        color = "red", size = 1,
    ) +
    theme_bw()
```

## Tendência global 

Assim, com a reta $\hat y_{t + h} = 3196.8 + 28.53\left(t + h\right)$, chegamos em resultados da raiz do erro quadrático médio e o erro médio absoluto de 1563.741 e 1302.091, respectivamente. Resultados justificados pela não captação da sazonalidade pelo método.

```{r}
rmse_vec(depois$sales, previsoes$sales)
mae_vec(depois$sales, previsoes$sales)
```

## Suavização exponencial de Holt (SEH)

O método de SEH consegue analisar as séries temporais que apresentam tendência, mas que não possuem sazonalidade. O método suaviza o nível e utiliza uma constante de suavização para "modelar a tendência da série. A previsão para $Z_{t + h}$ pode ser feito da seguinte forma:


$$
\hat Z_{t + 1}\left(h - 1\right) = \bar Z_{t + 1} + \left(h - 1\right)\hat T_{t + 1}, \ \forall h>0
$$

em que $\bar Z_t$ são os valores do nível e $\hat T_t$ o valor estimado da tendência da série, para $h$ passos a frente.

$$
\bar Z_{t + 1} = AZ_{t + 1} + \left(1 - A \right)\left(\bar Z_t + \hat T_t\right),\ 0 < A < 1 \ e\  t = 2,... , N
$$

$$
\hat T_{t +1 } = C\left(\bar Z_{t +1 } - \bar Z_t\right) + \left(1 - C\right)\hat T_t,\ 0 < c < 1 \ e \ t = 2,..., N
$$

Sendo A e C constantes de suavização.

## Suavização exponencial de Holt

```{r}
model_fit_ets <- exp_smoothing(seasonal_period = 12, season = "none", trend = "multiplicative", error = "auto") |> 
  set_engine("ets") |> 
  fit(sales ~ date, data = training(splits))
model_tbl <- modeltime_table(
  model_fit_ets
)
```

## Suavização exponencial de Holt

```{r echo=FALSE}
model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) |> 
  modeltime_forecast(
    new_data = testing(splits),
    actual_data = data
  ) |> 
  plot_modeltime_forecast(.interactive = FALSE, .title = "")
```

## Suavização exponencial de Holt

Como o método de Holt não consegue captar as mudanças sazonais, não conseguimos bons resultados com o método. A raiz do erro quadrático médio foi 1401.404 e o erro médio absoluto foi 1082.276, respectivamente.

```{r}
previsoes <- model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) 
rmse_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
mae_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
```

## Holt-Winters

O método de Holt-Winters, diferente da suavização de Holt, consegue captar as diferenças sazonais e as tendências. Este método pode funcionar para casos de série sazonal multiplicativa ou aditiva. Nesse caso, foi utilizado a multiplicativa.

As previsões são feitas da seguinte forma:

$$
\hat Z_{t + 1}\left(h - 1\right) = \left(\bar Z_{t+1} +\left(h - 1\right)\hat T_{t+1}\right)\hat F_{t + 1 + h - 2s}
$$
em que $\hat T_{t + 1}$, $\bar Z_{t + 1}$ e $\hat F$ é a estimativa da tendência, nível e do fator sazonal, respectivamente

$$
\hat F_{t + 1} = D \frac{Z_{t + 1}}{\bar Z_{t + 1}} + \left(1 - D\right)\hat F_{t+1 - s},
$$
$$
\bar Z_{t + 1} = A \frac{Z_{t + 1}}{\bar F_{t + 1 - s}} + \left(1 - A\right)\left(\bar Z_t + \hat T_t\right),
$$

$$
\hat T_{t + 1} = C \left(\bar Z_{t + 1} - \bar Z_t\right) + \left(1 - C\right)\hat T_t,
$$

A, C e D são componentes de suavização.

## Holt-Winters

```{r}
model_fit_ets <- exp_smoothing(
  seasonal_period = 12, 
  season = "multiplicative", 
  trend = "multiplicative",
  error = "auto", 
  ) |> 
  set_engine("ets") |> 
  fit(sales ~ date, data = training(splits))
model_tbl <- modeltime_table(
  model_fit_ets
)
```

## Holt-Winters

```{r}
model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) |> 
  modeltime_forecast(
    new_data = testing(splits),
    actual_data = data
  ) |> 
  plot_modeltime_forecast(.interactive = FALSE, .title = "")
```

## Holt-Winters

A raiz do erro quadrático médio e o erro médio absoluto foi 450.66 e 392.8, respectivamente. Vemos que agora utilizando um método que consegue captar a tendência e sazonalidade, conseguimos resultados bem melhores. Assim, o método de Holt-Winters é melhor para séries com padrão de comportamento mais gerais.

```{r}
previsoes <- model_tbl |> 
  modeltime_calibrate(new_data = testing(splits)) 
rmse_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
mae_vec(depois$sales, previsoes$.calibration_data[[1]]$.prediction)
```


<!-- jéssika: introdução
paulo: análise exploratória
jéssika: naive
    paulo: média global
jéssika: naive sazonal
gabriel: tendência global
    paulo: médias móveis
gabriel: alisamento exponencial (ou outro modelo)
gabriel: comparação
jéssika: conclusão -->
